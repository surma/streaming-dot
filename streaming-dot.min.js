(function(a,b){'object'==typeof exports&&'string'!=typeof exports.nodeName?b(exports):b(a.doT={})})(this,function(a){'use strict';function b(d){return d.replace(/\\('|\\)/g,'$1').replace(/[\r\t\n]/g,' ')}Object.assign(a,{version:'1.0.3',templateSettings:{evaluate:/\{\{(([^\}]+|\\.)+)\}\}/g,interpolate:/\{\{=\s*([^\}]+)\}\}/g,stream:/\{\{~\s*([^\}]+)\}\}/g,conditional:/\{\{\?(\?)?\s*([^\}]*)?\}\}/g,node:'object'==typeof process,varname:'it'}}),a.compile=function(d,g){g=Object.assign({},a.templateSettings,g);var h;h=g.node?`var s=(r)=>{
var d=!1,l,b=[];
r.then(r=>{
r.on('end',_=>{d=!0;l&&l()});
r.on('data',c=>(l&&(v=>{var t=l;l=null;t(v)})||(d=>b.push(d)))(c));
});
return i={next:_=>({done:b.length===0&&d,value:P(b.shift()||new Promise(r=>l=r))}),[Symbol.iterator]:_=>i};};`:`var s = (r) => {
r=r.then(r=>r.getReader());
var d=!1;
return i={next:_=>({done:d,value:r.then(r=>r.read()).then(v=>{d=v.done;return P(v.value)})}),[Symbol.iterator]:_=>i};
};`,d='var P=Promise.resolve.bind(Promise);'+h+'var g=function*(){yield P(\''+d.replace(/'|\\/g,'\\$&').replace(g.interpolate,function(i,j){return'\');yield P('+b(j)+');yield P(\''}).replace(g.conditional,function(i,j,k){if(k&&!j)// {{?<something>}} === if
return'\');yield P('+b(k)+').then(v=>v&&P(\'';return!k&&j?'\')||P(\'':'\'));yield P(\'';// {{?}} === "endif"
}).replace(g.stream,function(i,j){return'\');yield* s(P('+b(j)+'));yield P(\''}).replace(g.evaluate,function(i,j){return'\');'+b(j)+';yield P(\''}).replace(/\n/g,'\\n').replace(/\t/g,'\\t').replace(/\r/g,'\\r')+'\');}();',d+=g.node?`var r = new R({read:function f() {
var d=g.next();
if(d.done) return r.push(null);
P(d.value).then(v=>{if(v)return r.push(Buffer.from(v));else f()});
}});
return r;
`:`var e=new TextEncoder();
return new ReadableStream({
pull: c=>{
var v=g.next();
if(v.done)return c.close();
v.value.then(d=>{
if(typeof(d)=="string")d=e.encode(d);
d&&c.enqueue(d);
});
return v.value;
}});`;try{if(g.noEval)return d;if(g.node){const i=new Function(g.varname,'R',d);return j=>i(j,require('stream').Readable)}return new Function(g.varname,d)}catch(i){throw console.log('Could not create a template function: '+d),i}}});
